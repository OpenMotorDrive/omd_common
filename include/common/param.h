#pragma once

#include <stdint.h>
#include <stdbool.h>

#ifndef MACRO_DEBUG
#define __NL__
#define _
#define __
#endif

#define __PARAM_CONCAT(a,b) a##b
#define _PARAM_CONCAT(a,b) __PARAM_CONCAT(a,b)

enum param_type_t {
    PARAM_TYPE_EMPTY = 0,
    PARAM_TYPE_FLOAT32,
    PARAM_TYPE_UINT64,
    PARAM_TYPE_UINT32,
    PARAM_TYPE_UINT16,
    PARAM_TYPE_UINT8,
    PARAM_TYPE_INT64,
    PARAM_TYPE_INT32,
    PARAM_TYPE_INT16,
    PARAM_TYPE_INT8
};

struct __attribute__((packed)) param_descriptor_header_s {
    uint8_t type:7;
    uint8_t default_bool_val:1;
    const char* name;
}

struct __attribute__((packed)) param_descriptor_scalar_s {
    struct param_descriptor_header_s header;
    float default_val;
    float min_val;
    float max_val;
    void* cached_value;
};

void param_register(struct param_descriptor_header_s* param_descriptor_header);
void _param_register(struct param_descriptor_header_s* param_descriptor_header);


#define _PARAM_SCALAR_CTYPE_PARAM_TYPE_FLOAT32 float
#define _PARAM_SCALAR_CTYPE_PARAM_TYPE_UINT64 uint64_t
#define _PARAM_SCALAR_CTYPE_PARAM_TYPE_UINT32 uint32_t
#define _PARAM_SCALAR_CTYPE_PARAM_TYPE_UINT16 uint16_t
#define _PARAM_SCALAR_CTYPE_PARAM_TYPE_UINT8 uint8_t
#define _PARAM_SCALAR_CTYPE_PARAM_TYPE_INT64 int64_t
#define _PARAM_SCALAR_CTYPE_PARAM_TYPE_INT32 int32_t
#define _PARAM_SCALAR_CTYPE_PARAM_TYPE_INT16 int16_t
#define _PARAM_SCALAR_CTYPE_PARAM_TYPE_INT8 int8_t
#define __PARAM_SCALAR_CTYPE(TYPE) _PARAM_SCALAR_CTYPE_##TYPE
#define _PARAM_SCALAR_CTYPE(TYPE) __PARAM_SCALAR_CTYPE(TYPE)

#define _PARAM_DECLARE_SCALAR_PARAM(HANDLE_NAME, NAME, DEFAULT_VAL, MIN_VAL, MAX_VAL, TYPE) \
static _PARAM_SCALAR_CTYPE(TYPE) HANDLE_NAME = DEFAULT_VAL; __NL__\
static const struct param_descriptor_scalar_s _PARAM_CONCAT(_param_local_descriptor_structure_, __LINE__) = {{TYPE, 0, NAME}, DEFAULT_VAL, MIN_VAL, MAX_VAL, &HANDLE_NAME};__NL__\
__attribute__((constructor,unused)) static void _PARAM_CONCAT(_param_local_descriptor_constructor_, __LINE__) {__NL__\
    _param_register(&_PARAM_CONCAT(_param_local_descriptor_structure_, __LINE__));__NL__\
}

#define PARAM_DECLARE_FLOAT32_PARAM(HANDLE_NAME, NAME, DEFAULT_VAL, MIN_VAL, MAX_VAL) \
_PARAM_DECLARE_SCALAR_PARAM(HANDLE_NAME, NAME, DEFAULT_VAL, MIN_VAL, MAX_VAL, PARAM_TYPE_FLOAT32)

#define PARAM_DECLARE_UINT64_PARAM(HANDLE_NAME, NAME, DEFAULT_VAL, MIN_VAL, MAX_VAL) \
_PARAM_DECLARE_SCALAR_PARAM(HANDLE_NAME, NAME, DEFAULT_VAL, MIN_VAL, MAX_VAL, PARAM_TYPE_UINT64)

#define PARAM_DECLARE_UINT32_PARAM(HANDLE_NAME, NAME, DEFAULT_VAL, MIN_VAL, MAX_VAL) \
_PARAM_DECLARE_SCALAR_PARAM(HANDLE_NAME, NAME, DEFAULT_VAL, MIN_VAL, MAX_VAL, PARAM_TYPE_UINT32)

#define PARAM_DECLARE_UINT16_PARAM(HANDLE_NAME, NAME, DEFAULT_VAL, MIN_VAL, MAX_VAL) \
_PARAM_DECLARE_SCALAR_PARAM(HANDLE_NAME, NAME, DEFAULT_VAL, MIN_VAL, MAX_VAL, PARAM_TYPE_UINT16)

#define PARAM_DECLARE_UINT8_PARAM(HANDLE_NAME, NAME, DEFAULT_VAL, MIN_VAL, MAX_VAL) \
_PARAM_DECLARE_SCALAR_PARAM(HANDLE_NAME, NAME, DEFAULT_VAL, MIN_VAL, MAX_VAL, PARAM_TYPE_UINT8)

#define PARAM_DECLARE_INT64_PARAM(HANDLE_NAME, NAME, DEFAULT_VAL, MIN_VAL, MAX_VAL) \
_PARAM_DECLARE_SCALAR_PARAM(HANDLE_NAME, NAME, DEFAULT_VAL, MIN_VAL, MAX_VAL, PARAM_TYPE_INT64)

#define PARAM_DECLARE_INT32_PARAM(HANDLE_NAME, NAME, DEFAULT_VAL, MIN_VAL, MAX_VAL) \
_PARAM_DECLARE_SCALAR_PARAM(HANDLE_NAME, NAME, DEFAULT_VAL, MIN_VAL, MAX_VAL, PARAM_TYPE_INT32)

#define PARAM_DECLARE_INT16_PARAM(HANDLE_NAME, NAME, DEFAULT_VAL, MIN_VAL, MAX_VAL) \
_PARAM_DECLARE_SCALAR_PARAM(HANDLE_NAME, NAME, DEFAULT_VAL, MIN_VAL, MAX_VAL, PARAM_TYPE_INT16)

#define PARAM_DECLARE_INT8_PARAM(HANDLE_NAME, NAME, DEFAULT_VAL, MIN_VAL, MAX_VAL) \
_PARAM_DECLARE_SCALAR_PARAM(HANDLE_NAME, NAME, DEFAULT_VAL, MIN_VAL, MAX_VAL, PARAM_TYPE_INT8)

#ifdef MACRO_DEBUG
PARAM_DECLARE_FLOAT32_PARAM(pi, "pi", 4, 3, 5)
#endif
